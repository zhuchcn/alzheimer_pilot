mutate(protein = glc$feature_data[variable,"Protein"]) %>%
filter(protein == prot) %>%
nrow()
p = phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
res = c(N, m, n, k, x, p)
names(res) = c("N", "m", "n", "k", "x", "p.value")
return(res)
})
# 1. are glycosylation on protein X enriched
enrich_protein_increase = lapply(unique(glc$feature_data$protein), function(prot){
N = nfeatures(glc)
m = sum(glc$feature_data$protein == prot)
n = N - m
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
group = glc$sample_table$`Clinical Group`
) %>%
melt(id.vars = "group") %>%
group_by(group, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ group) %>%
mutate(value = AD - normal) %>%
filter(value < 0)
k = nrow(df)
x = df %>%
mutate(protein = glc$feature_data[variable,"protein"]) %>%
filter(protein == prot) %>%
nrow()
p = phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
res = c(N, m, n, k, x, p)
names(res) = c("N", "m", "n", "k", "x", "p.value")
return(res)
})
enrich_protein_increase = do.call(rbind, enrich_protein_increase)
rownames(enrich_protein_increase) = unique(glc$feature_data$Protein)
enrich_protein_increase
rownames(enrich_protein_increase) = unique(glc$feature_data$Protein)
enrich_protein_increase
rownames(enrich_protein_increase) = unique(glc$feature_data$protein)
enrich_protein_increase
enrich_protein_decrease = lapply(unique(glc$feature_data$protein), function(prot){
N = nfeatures(glc)
m = sum(glc$feature_data$protein == prot)
n = N - m
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
group = glc$sample_table$`Clinical Group`
) %>%
melt(id.vars = "group") %>%
group_by(group, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ group) %>%
mutate(value = AD - normal) %>%
filter(value > 0)
k = nrow(df)
x = df %>%
mutate(protein = glc$feature_data[variable,"protein"]) %>%
filter(protein == prot) %>%
nrow()
p = phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
res = c(N, m, n, k, x, p)
names(res) = c("N", "m", "n", "k", "x", "p.value")
return(res)
})
enrich_protein_decrease = do.call(rbind, enrich_protein_decrease)
rownames(enrich_protein_decrease) = unique(glc$feature_data$protein)
enrich_protein_decrease
library(ggplot2)
enrich_protein_decrease %>%
as.data.frame %>%
ggplot() +
geom_point(aes(x = m, y = x))
enrich_protein_decrease %>%
as.data.frame %>%
ggplot() +
geom_point(aes(x = m, y = x/m))
# 1. are glycosylation on protein X enriched
enrich_protein_increase = lapply(unique(glc$feature_data$protein), function(prot){
N = nfeatures(glc)
m = sum(glc$feature_data$protein == prot)
n = N - m
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
group = glc$sample_table$`Clinical Group`
) %>%
melt(id.vars = "group") %>%
group_by(group, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ group) %>%
mutate(value = AD - normal) %>%
filter(value > 0)
k = nrow(df)
x = df %>%
mutate(protein = glc$feature_data[variable,"protein"]) %>%
filter(protein == prot) %>%
nrow()
p = phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
res = c(N, m, n, k, x, p)
names(res) = c("N", "m", "n", "k", "x", "p.value")
return(res)
})
enrich_protein_increase = do.call(rbind, enrich_protein_increase)
rownames(enrich_protein_increase) = unique(glc$feature_data$protein)
enrich_protein_decrease = lapply(unique(glc$feature_data$protein), function(prot){
N = nfeatures(glc)
m = sum(glc$feature_data$protein == prot)
n = N - m
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
group = glc$sample_table$`Clinical Group`
) %>%
melt(id.vars = "group") %>%
group_by(group, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ group) %>%
mutate(value = AD - normal) %>%
filter(value < 0)
k = nrow(df)
x = df %>%
mutate(protein = glc$feature_data[variable,"protein"]) %>%
filter(protein == prot) %>%
nrow()
p = phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
res = c(N, m, n, k, x, p)
names(res) = c("N", "m", "n", "k", "x", "p.value")
return(res)
})
enrich_protein_decrease = do.call(rbind, enrich_protein_decrease)
rownames(enrich_protein_decrease) = unique(glc$feature_data$protein)
enrich_protein_increase
enrich_protein_decrease
library(tibble)
enrich_protein_decrease %>%
rownames_to_column("protein") %>%
arrange(p.value)
enrich_protein_decrease %>%
as.data.frame %>%
rownames_to_column("protein") %>%
arrange(p.value)
table(glc$feature_data$protein)
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data")
# set the file location as the working directory
setwd(dirname(parent.frame(2)$ofile))
# load required packages
pkgs = c("dplyr", "stringr", "reshape2", "Metabase", "readxl")
for(pkg in pkgs){
suppressPackageStartupMessages(library(pkg, character.only = TRUE))
}
# data path
file = "../../../data-raw/AD plasma - normalized data.xlsx"
# -------- sample table --------------------------------------------------------
# read the pdata
pdata = read_excel(file, sheet = 3) %>% as.data.frame %>%
tibble::column_to_rownames("SAMPLE CODE")
pdata$`Clinical Group` = ifelse(
is.na(pdata$PATHDX1), ifelse(
grepl("^AD", pdata$GROUP), "AD", "normal"
), ifelse(
grepl("^01", pdata$PATHDX1), "normal", "AD"
)
)
# data cleaning
pdata$`Clinical Group` = factor(pdata$`Clinical Group`, levels = c("normal", "AD"))
pdata$`ApoE (1)` = ifelse(
is.na(pdata$`ApoE (1)`),
as.integer(gsub(".* E(\\d)/.*", "\\1", pdata$GROUP)),
pdata$`ApoE (1)`
)
pdata$`ApoE (1)` = factor(pdata$`ApoE (1)`)
pdata$`ApoE (2)` = ifelse(
is.na(pdata$`ApoE (2)`),
as.integer(gsub(".*(\\d)$", "\\1", pdata$GROUP)),
pdata$`ApoE (2)`
)
pdata$`ApoE (2)` = factor(pdata$`ApoE (2)`)
pdata$apoE = paste(pdata$`ApoE (1)`, pdata$`ApoE (2)`, sep = "-")
# -------- istd corrected peptides ---------------------------------------------
edata = read_excel(file, sheet = 1, na = "ND") %>%
as.data.frame %>% tibble::column_to_rownames("...1")
edata = edata[,rownames(pdata)]
pdata$ISTD = as.numeric(edata[1,])
edata = edata[-1,]
# peptides
edata1 = edata[grepl("^QuantPep-", rownames(edata)),]
rownames(edata1) = gsub("^QuantPep-", "", rownames(edata1))
fdata1 = str_split_fixed(rownames(edata1), "_", n = 2) %>%
as.data.frame %>% data.table::setnames(c("protein", "sequence"))
rownames(fdata1) = rownames(edata1)
ppt = ProteomicsSet(
conc_table = conc_table(as.matrix(edata1)),
sample_table = sample_table(pdata),
feature_data = feature_data(fdata1)
)
# glycpeptides
edata2 = edata[!grepl("^QuantPep-", rownames(edata)),]
fdata2 = str_split_fixed(rownames(edata2), "_", n = 3) %>%
as.data.frame %>% data.table::setnames(c("protein", "position", "composition"))
rownames(fdata2) = rownames(edata2)
glycans = lapply(fdata2$Glycan, function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
glycans = do.call(rbind, glycans)
head(glycans)
glycans = lapply(fdata2$composition, function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
head(fdata2)
glycans = lapply(fdata2$composition, function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
glycan = fdata2$composition[1]
grepl("/", glycan)
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
glycans = lapply(fdata2$composition, function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
glycans = lapply(fdata2$composition, function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
glycan
i = 0
i = 0
glycans = lapply(fdata2$composition, function(glycan){
.GlobalEnv$i =  .GlobalEnv$i + 1
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
i
glycan = fdata2$composition[2]
glycan
grepl("/", glycan)
strsplit(glycan, "")[[1]]
glycans = lapply(as.character(fdata2$composition), function(glycan){
.GlobalEnv$i =  .GlobalEnv$i + 1
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
i = 0
glycans = lapply(as.character(fdata2$composition), function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
glycans = do.call(rbind, glycans)
head(glycans)
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
glc
head(glc$feature_data)
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
head(glc$feature_data)
glc = data$glycopeptides_normalized
# 2. Fuc
glc = subset_features(
data$glycopeptides_normalized,
!is.na(data$glycopeptides_normalized$feature_data$Neu5Ac)
)
head(data$glycopeptides_normalized$feature_data)
dim(fdata2)
dim(fdata)
glycans = lapply(as.character(fdata$composition), function(glycan){
if(grepl("/", glycan)){
glycan = str_split(glycan, "/")[[1]]
glycan = lapply(glycan, function(g){
strsplit(g, "")[[1]]
})
Hex = ifelse(glycan[[1]][1] == glycan[[2]][1], glycan[[1]][1], NA)
HexNAc = ifelse(glycan[[1]][2] == glycan[[2]][2], glycan[[1]][2], NA)
Fuc = ifelse(glycan[[1]][3] == glycan[[2]][3], glycan[[1]][3], NA)
Neu5Ac = ifelse(glycan[[1]][4] == glycan[[2]][4], glycan[[1]][4], NA)
}else{
glycan = strsplit(glycan, "")[[1]]
Hex = glycan[1]
HexNAc = glycan[2]
Fuc = glycan[3]
Neu5Ac = glycan[4]
}
res = as.integer(c(Hex, HexNAc, Fuc, Neu5Ac))
names(res) = c("Hex", "HexNAc", "Fuc", "Neu5Ac")
return(res)
})
glycans = do.call(rbind, glycans)
fdata = cbind(fdata2, glycans)
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
# 2. Fuc
glc = subset_features(
data$glycopeptides_normalized,
!is.na(data$glycopeptides_normalized$feature_data$Neu5Ac)
)
# 2. Fuc
glc = subset_features(
data$glycopeptides_normalized,
!is.na(data$glycopeptides_normalized$feature_data$Fuc)
)
N = nfeatures(glc)
m = sum(glc$feature_data$Fuc == 0)
n = N - m
m
n
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
flipgroup = glc$sample_table$flipgroup
) %>%
melt(id.vars = "flipgroup") %>%
group_by(flipgroup, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ flipgroup) %>%
mutate(value = cLNS - aIFA) %>%
filter(value > 0)
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
group = glc$sample_table$`Clinical Group`
) %>%
melt(id.vars = "group") %>%
group_by(group, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ group) %>%
mutate(value = AD - normal) %>%
filter(value < 0)
k = nrow(df)
x = df %>%
mutate(Fuc = glc$feature_data[variable,"Fuc"]) %>%
filter(Fuc == 0) %>%
nrow()
x
k
phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
# 2. Fuc
glc = subset_features(
data$glycopeptides_normalized,
!is.na(data$glycopeptides_normalized$feature_data$Neu5Ac)
)
N = nfeatures(glc)
m = sum(glc$feature_data$Neu5Ac == 0)
n = N - m
df = glc$conc_table %>% t %>% as.data.frame %>%
mutate(
group = glc$sample_table$`Clinical Group`
) %>%
melt(id.vars = "group") %>%
group_by(group, variable) %>%
summarise(mean = mean(value)) %>%
ungroup() %>%
dcast(variable ~ group) %>%
mutate(value = AD - normal) %>%
filter(value < 0)
k = nrow(df)
x = df %>%
mutate(glycan = glc$feature_data[variable,"Neu5Ac"]) %>%
filter(glycan == 0) %>%
nrow()
phyper(q=x-1, m=m, n=n, k=k, lower.tail=FALSE)
load("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.rda")
names(data)
names(data$glycopeptides_adjusted)
data$glycopeptides_adjusted
load("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.rda")
names(data)
head(data$glycopeptides_adjusted$sample_table)
