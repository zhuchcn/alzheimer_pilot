devtools::install_github("zhuchcn/Metabase")
devtools::install_github("zhuchcn/Metabase", dep = F)
devtools::install_github("zhuchcn/ggmetaplots", dep = F)
install.packages("ggsci")
library(RColorBrewer)
shiny::runApp('apps/app')
install.packages("R6")
install.packages("R6")
install.packages("shinyjs")
runApp('apps/plasma-glc')
install.packages("import")
runApp('apps/plasma-glc')
glc$sample_table
glc$sample_table
glkc
glc
glc@sample_table
traceback()
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc$sample_table
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc
glc$sample_table
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc$sample_table
traceback()
?shinyjs::show
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc$sample_table
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc$sample_table
apply(glc$sample_table, class)
spply(glc$sample_table, class)
sapply(glc$sample_table, class)
colnames(glc$sample_table)
a = letters[1:5]
a
glue::collapse(a)
states = list()
states$varNames = c("SEX", "AGE")
glue("~ {paste(states$varNames, sep = ' + ')} + group")
library(glue)
glue("~ {paste(states$varNames, sep = ' + ')} + group")
glue("~ {paste(states$varNames, collapse = ' + ')} + group")
a = list("a", "b", "c")
paste(a, collapse = "+")
a = list()
a
a[["var1"]] = "AGE"
a
length(a)
a[[1]]
varNames = character()
varNames
seq_along(varNames)
pdata = sample_table(data)
pdata = as(pdata, "data.frame")
pdata = sample_table(glc)
pdata = as(pdata, "data.frame")
formula = as.formula("~ group")
model.matrix(data = pdata, formula)
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
install.packages("readxl")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
model.matrix(data = pdata, formula)
design = model.matrix(data = pdata, formula)
dim(design)
glc
mset = subset_samples(glc, !is.na(glc$sample_table$group))
mset
mSet_limma(mset, design, coef = "groupAD", p.value = "groupAD")
which(colnames(design) == "groupAD")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc
table(glc$sample_table$group)
selected = glc$sample_table$AGE
data.frame(
value = selected
) %>%
ggplot(aes(y = selected)) +
geom_histogram()
data.frame(
value = selected
) %>%
ggplot(aes(x = selected)) +
geom_histogram()
data.frame(
value = selected
) %>%
ggplot(aes(x = selected)) +
geom_histogram(bins = 25)
data.frame(
value = selected
) %>%
ggplot(aes(x = selected)) +
geom_histogram(bins = 25, color = "white")
data.frame(
value = selected
) %>%
ggplot(aes(x = selected)) +
geom_histogram(bins = 25, color = "white")
selected = glc$sample_table$SEX
table(selected) %>%
as.data.frame
table(selected) %>%
as.data.frame %>%
ggplot(aes(x = selected, y = Freq)) +
geom_bar()
data.frame(
value = selected
) %>%
ggplot(aes(x = selected, y = Freq)) +
geom_bar()
data.frame(
value = selected
) %>%
ggplot(aes(x = value)) +
geom_bar()
data.frame(
value = selected
) %>%
ggplot(aes(x = value)) +
geom_bar(fil = "steelblue")
data.frame(
value = selected
) %>%
ggplot(aes(x = value)) +
geom_bar(fill = "steelblue")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
selected = glc$sample_table$AGE
data.frame(
value = selected
) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 25, color = "white") +
geom_density()
hist(apply(glc$conc_table, 1, median))
plot_median_hist(glc)
plot_median_hist(transform_by_feature(glc, log))
plot_median_hist(transform_by_feature(glc, function(x) log(x+1)))
plot_median_hist(transform_by_feature(glc, function(x) log(x+0.1)))
plot_median_hist(transform_by_feature(glc, function(x) log(x+0.0001)))
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
design = model.matrix(
data = as(glc$sample_table, "data.frame"),
~ group
)
design
dim(design)
glc
head(featureNames(glc))
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
tags$hr()
glc
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
glc
formula = as.formula("~ `Clinical Group")
formula = as.formula("~ `Clinical Group`")
formula
getVarsFromFormula = function(f){
if(length(f) == 1){
return(as.character(f))
} else if(length(f) == 2){
return(self$getVarsFromFormula(f[[2]]))
} else if(length(f[[2]]) == 1){
if(length(f[[3]]) == 1){
return(as.character(c(f[[2]], f[[3]])))
} else {
return(c(as.character(f[[2]]), self$getVarsFromFormula(f[[3]])))
}
}  else {
return(c(self$getVarsFromFormula(f[[2]]), self$getVarsFromFormula(f[[3]])))
}
}
getVarsFromFormula(formula)
getVarsFromFormula = function(f){
if(length(f) == 1){
return(as.character(f))
} else if(length(f) == 2){
return(getVarsFromFormula(f[[2]]))
} else if(length(f[[2]]) == 1){
if(length(f[[3]]) == 1){
return(as.character(c(f[[2]], f[[3]])))
} else {
return(c(as.character(f[[2]]), getVarsFromFormula(f[[3]])))
}
}  else {
return(c(getVarsFromFormula(f[[2]]), getVarsFromFormula(f[[3]])))
}
}
getVarsFromFormula(formula)
varNames = c("Clinical Group", "ApoE (1)")
glue("~ `{paste(states$varNames, collapse = '` + `')}`")
glue("~ `{paste(varNames, collapse = '` + `')}`")
formula
formula = as.formula(glue("~ `{paste(varNames, collapse = '` + `')}`"))
formula
design = model.matrix(
data = as(glc$sample_table, "data.frame"),
formula
)
colnames(design)
design
mSet_limma(glc, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
varNames = c("Clinical Group")
formula = as.formula(glue("~ `{paste(varNames, collapse = '` + `')}`"))
formula
design = model.matrix(
data = as(glc$sample_table, "data.frame"),
formula
)
design
dim(design)
mSet_limma(glc, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
mset = subset_samples(glc, rownames(design))
mset
mSet_limma(mset, design, coef = coef, p.value = coef)
mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
colnames(design)
mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
traceback()
library(limma)
lmFit(as(mset$conc_table, "matirx"), design)
lmFit(as.matrix(mset$conc_table), design)
fit = lmFit(as.matrix(mset$conc_table), design)
fit = eBayes(fit)
topTable(fit, coef = "`Clinical Group`AD")
mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
mSet_limma
mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
browser(mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD"))
broser()
browser(mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD"))
browser()
N
next
browser(mSet_limma(mset, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD"))
object = mset
object
transform = function(x) {
log2(x + 1)
}
coef = "`Clinical Group`AD"
p.value = "`Clinical Group`AD"
data = object@conc_table
data = transform(data)
fit = limma::lmFit(data, design)
fit_ebayes = limma::eBayes(fit)
res = limma::topTable(fit_ebayes, coef = coef, p.value = p.value,
number = nfeatures(object), sort.by = "none")
head(res)
fit
coef
limma::topTable(fit_ebayes, coef = "`Clinical Group`AD")
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/global.R')
varNames = c("Clinical Group")
formula = as.formula(glue("~ `{paste(varNames, collapse = '` + `')}`"))
design = model.matrix(
data = as(glc$sample_table, "data.frame"),
formula
)
design
dim(design)
mSet_limma(glc, design, coef = "`Clinical Group`AD", p.value = "`Clinical Group`AD")
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data")
read_excel(file, sheet = 1, na = "ND")
# load required packages
pkgs = c("dplyr", "stringr", "reshape2", "Metabase", "readxl")
for(pkg in pkgs){
suppressPackageStartupMessages(library(pkg, character.only = TRUE))
}
read_excel(file, sheet = 1, na = "ND")
# data path
file = "../../../data-raw/AD plasma - normalized data.xlsx"
read_excel(file, sheet = 1, na = "ND")
# -------- istd corrected peptides ---------------------------------------------
edata = read_excel(file, sheet = 1, na = "ND") %>%
as.data.frame %>% tibble::column_to_rownames("...1")
edata[1:5,1:5]
# -------- sample table --------------------------------------------------------
# read the pdata
pdata = read_excel(file, sheet = 3) %>% as.data.frame %>%
tibble::column_to_rownames("SAMPLE CODE")
pdata$`Clinical Group` = ifelse(
is.na(pdata$PATHDX1), NA, ifelse(
grepl("^01", pdata$PATHDX1), "normal", "AD"
)
)
dim(pdata)
pdata[1:5,25:28]
tail(pdata[,25:28])
tail(pdata[,20:28])
# data path
file = "../../../data-raw/AD plasma - normalized data.xlsx"
# -------- sample table --------------------------------------------------------
# read the pdata
pdata = read_excel(file, sheet = 3) %>% as.data.frame %>%
tibble::column_to_rownames("SAMPLE CODE")
View(pdata)
grep("a(bbb)c", "aaaabbbbcccc")
grep("a((bbb))c", "aaaabbbbcccc")
str_subset("aaaabbbcccc", "a(bbb)c")
str_subset("aaaabbbcccc", "abbbc")
str_subset("aaaabbbcccc", "ab*c")
grep("a((bbb))c", "aaaabbbbcccc", perl = T)
grep("a(bbb)c", "aaaabbbbcccc", perl = T)
grep("abbbc", "aaaabbbbcccc", perl = T)
grep("abbbc", "aaaabbbcccc", perl = T)
grep("a(bbb)c", "aaaabbbcccc", perl = T)
str_subset("aaaabbbcccc", "bbb")
str_subset(fruit, "^a")
str_extract("aaaabbbcccc", "bbb")
str_extract("aaaabbbcccc", "abbbb")
str_extract("aaaabbbcccc", "abbbc")
str_extract("aaaabbbcccc", "a(bbb)c")
gsub(" E(\\d)/", "\\1", pdata$GROUP)
gsub("* E(\\d)/*", "\\1", pdata$GROUP)
gsub(".* E(\\d)/.*", "\\1", pdata$GROUP)
class(pdata$`ApoE (1)`)
as.integer(gsub(".*/E(\\d)$"), "\\1", pdata$GROUP)
as.integer(gsub(".*/E(\\d)$", "\\1", pdata$GROUP))
as.integer(gsub(".*(\\d)$", "\\1", pdata$GROUP))
pdata = read_excel(file, sheet = 3) %>% as.data.frame %>%
tibble::column_to_rownames("SAMPLE CODE")
pdata$`Clinical Group` = ifelse(
is.na(pdata$PATHDX1), ifelse(
grepl("^AD", pdata$GROUP), "AD", "normal"
), ifelse(
grepl("^01", pdata$PATHDX1), "normal", "AD"
)
)
# data cleaning
pdata$`Clinical Group` = factor(pdata$`Clinical Group`, levels = c("normal", "AD"))
pdata$`ApoE (1)` = ifelse(
is.na(pdata$`ApoE (1)`),
as.integer(gsub(".* E(\\d)/.*", "\\1", pdata$GROUP)),
pdata$`ApoE (1)`
)
pdata$`ApoE (1)` = factor(pdata$`ApoE (1)`)
pdata$`ApoE (2)` = ifelse(
is.na(pdata$`ApoE (2)`),
as.integer(gsub(".*(\\d)$", "\\1", pdata$GROUP)),
pdata$`ApoE (2)`
)
pdata$`ApoE (2)` = factor(pdata$`ApoE (2)`)
pdata$apoE = paste(pdata$`ApoE (1)`, pdata$`ApoE (2)`, sep = "-")
View(pdata)
# -------- istd corrected peptides ---------------------------------------------
edata = read_excel(file, sheet = 1, na = "ND") %>%
as.data.frame %>% tibble::column_to_rownames("...1")
dim(edata)
rownames(edata)[1]
edata = edata[colnames(pdata),]
dimi(edata)
dim(edata)
# -------- istd corrected peptides ---------------------------------------------
edata = read_excel(file, sheet = 1, na = "ND") %>%
as.data.frame %>% tibble::column_to_rownames("...1")
edata = edata[,colnames(pdata)]
# -------- istd corrected peptides ---------------------------------------------
edata = read_excel(file, sheet = 1, na = "ND") %>%
as.data.frame %>% tibble::column_to_rownames("...1")
colnames(pdata)
edata = edata[,rownames(pdata)]
dim(edata)
pdata$ISTD = edata[1,]
pdata$ISTD = as.numeric(edata[1,])
edata = edata[-1,]
devtools::install_github("zhuchcn/MatCorR")
devtools::install_github("zhuchcn/MatCorR", dep = F)
edata1 = edata[grepl("^QuantPep-"),]
edata1 = edata[grepl("^QuantPep-",rownames(edata)),]
dim(edata1)
rownames(edata1) = gsub("^QuantPep-", "", rownames(edata1))
fdata1 = str_split_fixed(rownames(edata), "_", n = 2)
head(fdata1)
fdata1 = str_split_fixed(rownames(edata1), "_", n = 2)
head(fdata1)
class(fdata1)
fdata1 = str_split_fixed(rownames(edata1), "_", n = 2) %>%
as.data.frame %>% data.table::setnames(c("protein", "sequence"))
class(fdata1)
head(fdata1)
rownames(fdata1) = rownames(edata1)
head(fdata1)
ppt = ProteomicsSet(
conc_table = conc_table(as.matrix(fdata1)),
sample_table = sample_table(pdata),
feature_data = feature_data(fdata1)
)
fdata1[1:5,1:5]
edata1[1:5,1:5]
View(edata1)
sapply(edata1, class)
ppt = ProteomicsSet(
conc_table = conc_table(as.matrix(edata1)),
sample_table = sample_table(pdata),
feature_data = feature_data(fdata1)
)
# glycpeptides
edata2 = edata[!grepl("^QuantPep-", rownames(edata)),]
(edata2dim)
dim(edata2)
fdata2 = str_split_fixed(rownames(edata2), "_", n = 3) %>%
as.data.frame %>% data.table::setnames(c("protein", "sequence"))
fdata2 = str_split_fixed(rownames(edata2), "_", n = 3) %>%
as.data.frame %>% data.table::setnames(c("protein", "position", "composition"))
rownames(fdata2) = rownames(edata2)
head(fdata2)
glc1 = ProteomicsSet(
conc_table = conc_table(as.matrix(edata2)),
sample_table = sample_table(pdata),
feature_data = feature_data(fdata2)
)
# -------- normalized glycopeptides --------------------------------------------
# read the edata
edata = read_excel(file, sheet = 2, na = "ND") %>%
as.data.frame %>%
tibble::column_to_rownames("...1")
# rearrange the edata
edata = edata[,rownames(pdata)] %>% as.matrix
# create a fdata
fdata = str_split_fixed(rownames(edata), "\\_", n=3) %>%
as.data.frame %>%
data.table::setnames(c("protein", "position", "composition"))
rownames(fdata) = rownames(edata)
dim(edata)
dim(edata2)
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc/data/data.R')
setwd("~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/apps/plasma-glc")
data$peptides$sample_table
names(data)
data
data$peptides
data$glycopeptides_adjusted
data$glycopeptides_normalized
gsub("`", "", c("`A", "`B", "`C"))
datatable()
