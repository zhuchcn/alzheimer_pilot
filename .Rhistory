as.data.frame %>%
`rownames<-`(rn)
head(res)
res$statistic
res$statistic[1]
res$statistic[[1]]
res$statistic
res = t.test(x[i,] ~ y)
res = list(
"statistic" = res$statistic,
"stderr" = res$stderr,
"p.value" = res$p.value
)
res$statistic
class(res$statistic)
type(res$statistic)
typeof(res$statistic)
I(res$statistic)
unclass(res$statistic)
unlist(res$statistic)
unname(res$statistic)
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = list(
"statistic" = unname(res$statistic),
"stderr" = res$stderr,
"p.value" = res$p.value
)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`rownames<-`(rn)
return(res)
}
fit = ttests(glc$conc_table, y, log)
head(fit$statistic)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = list(
"statistic" = unname(res$statistic),
"stderr" = res$stderr,
"p.value" = res$p.value
)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`rownames<-`(rn)
head(fit$statistic)
res = c(res$statistic, res$stderr, res$p.value) %>%
`names<-`("statistic", 'stderr', 'p.value')
res = c(res$statistic, res$stderr, res$p.value) %>%
`names<-`(c("statistic", 'stderr', 'p.value'))
res
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value) %>%
`names<-`(c("statistic", 'stderr', 'p.value'))
res
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value) %>%
`names<-`(c("statistic", 'stderr', 'p.value'))
return(res)
})
head(res)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value) %>%
`names<-`(c("statistic", 'stderr', 'p.value'))
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`rownames<-`(rn)
head(fit$statistic)
head(res)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`rownames<-`(rn)
head(res)
res$t
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`colnames<-`("statistic", 'stderr', 'p.value')
`rownames<-`(rn)
return(res)
}
fit = ttests(glc$conc_table, y, log)
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`colnames<-`c(("statistic", 'stderr', 'p.value'))
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`colnames<-`c(("statistic", 'stderr', 'p.value')) %>%
fit = ttests(glc$conc_table, y, log)
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`colnames<-`(c("statistic", 'stderr', 'p.value')) %>%
`rownames<-`(rn)
return(res)
}
fit = ttests(glc$conc_table, y, log)
head(fit)
fit$statistic
head(fit)
edata = glc$conc_table %>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
}))
df = df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
}))
head(df)
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
cbind(fit, df) %>%
arrange(power_n) %>%
datatable() %>%
formatRound(columns = c('delta', 'sd'), digits = 2)
cbind(fit, df) %>% head
arrange(power_n) %>%
datatable() %>%
formatRound(columns = 1:5, digits = 2)
cbind(fit, df) %>%
arrange(power_n) %>%
datatable() %>%
formatRound(columns = 1:5, digits = 2)
cbind(fit, df) %>%
arrange(power_n) %>% HEAD
cbind(fit, df) %>%
arrange(power_n) %>% head
merge(fit, df) %>%
arrange(power_n) %>% head
head(df)
head(fit)
merge(fit, df) %>%
tibble::rownames_to_column("variable") %>%
arrange(power_n) %>% head
merge(fit, df) %>%
tibble::rownames_to_column("variable") %>%
arrange(power_n) %>%
datatable() %>%
formatRound(columns = 1:5, digits = 2)
merge(fit, df) %>%
tibble::rownames_to_column("variable") %>%
arrange(power_n) %>%
datatable()
arrange(power_n) %>% head
edata = glc$conc_table %>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
merge(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
)
edata = glc$conc_table %>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
merge(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
)
edata = glc$conc_table %>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
head(df)
cbind(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
)
arrange(power_n) %>%
datatable()
arrange(power_n) %>% head
arrange(power_n) %>% head
edata = glc$conc_table %>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(power_n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
cbind(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
)
arrange(power_n) %>%
datatable()
cbind(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
) %>%
arrange(power_n) %>%
datatable()
Sys.time()
strftime(Sys.time(), "%Y-%m-%d")
strftime(Sys.time(), "%Y-%M-%d")
strftime(Sys.time(), "%Y-%m-%d")
table(glc$sample_table$`Clinical Group`)
?power.t.test
nfeatures(glc)
# perform simple t tests to every variable
#design = model.matrix(data = as(glc$sample_table, 'data.frame'), ~ `Clinical Group`)
y = glc$sample_table$`Clinical Group`
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`colnames<-`(c("statistic", 'stderr', 'p.value')) %>%
`rownames<-`(rn)
return(res)
}
fit = ttests(glc$conc_table, y, log)
# perform power calculation on each variable
edata = glc$conc_table %>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
# put result together
cbind(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
) %>%
arrange(n) %>%
datatable()
sum(df$n<=60)
sum(df$n<=70)
sum(df$n<=50)
knitr::opts_chunk$set(echo = TRUE)
# load packages
pkgs=c("dplyr", "reshape2", "ggplot2", "Metabase", 'DT')
for(pkg in pkgs){
suppressPackageStartupMessages(library(pkg, character.only=TRUE))
}
# load dataset
load('../../apps/plasma-glc/data/data.rda')
glc = data$glycopeptides_adjusted
glc = transform_by_feature(glc, function(x)
ifelse(is.na(x), min(x, na.rm = TRUE) / 2, x)
)
# perform simple t tests to every variable
#design = model.matrix(data = as(glc$sample_table, 'data.frame'), ~ `Clinical Group`)
y = glc$sample_table$`Clinical Group`
ttests = function(x, y, transform, coef){
rn = rownames(x)
x = apply(x, 2, transform)
res = lapply(seq_len(nrow(x)), function(i){
res = t.test(x[i,] ~ y)
res = c(res$statistic, res$stderr, res$p.value)
return(res)
})
res = do.call(rbind, res) %>%
as.data.frame %>%
`colnames<-`(c("statistic", 'stderr', 'p.value')) %>%
`rownames<-`(rn)
return(res)
}
fit = ttests(glc$conc_table, y, I)
# perform power calculation on each variable
edata = glc$conc_table #%>% log
df = edata %>% t %>% as.data.frame %>%
mutate(clinical_group = glc$sample_table$`Clinical Group`) %>%
melt(id.vars = "clinical_group") %>%
group_by(clinical_group, variable) %>%
summarize(mean = mean(value)) %>%
dcast(variable ~ clinical_group, value.var = "mean") %>%
mutate(delta = AD - normal) %>%
select(-normal, -AD) %>%
mutate(sd = apply(edata, 1, sd))
df = df %>%
mutate(n = sapply(seq_len(nrow(df)), function(i){
power.t.test(
delta = df$delta[i], sd = df$sd[i],
sig.level = 0.05, power = 0.8
)$n %>% ceiling()
})) %>%
tibble::column_to_rownames("variable")
# put result together
cbind(fit, df) %>%
tibble::rownames_to_column("variable") %>%
mutate(
statistic = round(statistic, 3),
stderr = round(stderr, 3),
p.value = round(p.value, 3),
delta = round(delta, 3),
sd = round(sd, 3)
) %>%
arrange(n) %>%
datatable(
extensions = 'Buttons', options = list(
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
)
)
?power.t.test
knitr::opts_chunk$set(echo = TRUE)
# load packages
pkgs=c("dplyr", "reshape2", "ggplot2", "Metabase", 'DT')
for(pkg in pkgs){
suppressPackageStartupMessages(library(pkg, character.only=TRUE))
}
# load dataset
load('../../apps/plasma-glc/data/data.rda')
glc = data$glycopeptides_adjusted
glc = transform_by_feature(glc, function(x)
ifelse(is.na(x), min(x, na.rm = TRUE) / 2, x)
)
table(glc$sample_table$`Clinical Group`)
table(glc$sample_table$apoE)
length(unique(glc$feature_data$protein)))
length(unique(glc$feature_data$protein))
names(data)
df = data.frame(A = c(10,40,100), B = c(100, 40, 10))
df
mymap = function(df){
df[1,] = df[1,] * 0.1
df[2,] = df[2,] * 0.5
df[3,] = df[3,] * 0.9
}
mymap(df)
mymap = function(df){
df[1,] = df[1,] * 0.1
df[2,] = df[2,] * 0.5
df[3,] = df[3,] * 0.9
return(df)
}
mymap(df)
rownames(df) = c("x", "y", "z")
df
rownames(df) = c("x", "y", "z")
df
mymap(df)
knitr::kable(df, format = "markdown")
knitr::kable(mymap(df), format = "markdown")
