}
} else if (i != nrow) {
if(j == 1){
style = style + border(c("RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border("RIGHT")
}
} else {
if(j == 1){
style = style + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i <= 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style + border(c("RIGHT", "LEFT"))
}
# else if(j %% 6 == 1) {
#     style = style + border("RIGHT")
# }
}
# else {
#     if(j == 1){
#         style = style + border(c("BOTTOM", "RIGHT", "LEFT"))
#     } else if(j %% 6 == 1) {
#         style = style + border(c("BOTTOM", "RIGHT"))
#     } else {
#         style = style + border("BOTTOM")
#     }
# }
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
1 %%6
2 %%6
6 %% 6
ncol %%6
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i <= 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
}
#  else if(j %% 6 == 1) {
#     style = style + border("RIGHT")
# }
} else {
if(j == 1){
style = style + border(c("BOTTOM", "RIGHT", "LEFT"))
# } else if(j %% 6 == 1) {
#     style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i <= 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
}
#  else if(j %% 6 == 1) {
#     style = style + border("RIGHT")
# }
} else {
if(j == 1){
style = style + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i <= 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border("RIGHT")
} else {
next
}
} else {
if(j == 1){
style = style_header + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i == 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border("LEFT")
} else {
next
}
} else {
if(j == 1){
style = style_header + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i == 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = CellStyle(wb) + border("RIGHT")
} else {
next
}
} else {
if(j == 1){
style = style_header + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i == 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border("RIGHT")
} else {
next
}
} else {
if(j == 1){
style = style_header + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home')
library(xlsx)
wb = createWorkbook(type='xlsx')
style_header = CellStyle(wb) + Font(wb, isBold = TRUE)
border = function(position){
return(Border(color = "black", position = position, pen = "BORDER_THIN"))
}
for(type in names(lm)){
sheet = createSheet(wb, sheetName = type)
setColumnWidth(sheet, colIndex = 1, colWidth = 20)
title_row = createRow(sheet, 1)
for(i in seq_along(lm[[type]])){
colIndex = (i - 1) * 6 + 2
cell = createCell(title_row, colIndex)
addMergedRegion(sheet, 1,1,colIndex, colIndex + 5)
setCellValue(cell[[1]], names(lm[[type]])[i])
addDataFrame(lm[[type]][[i]], sheet, startRow = 2,
startColumn = colIndex - (i == 1), row.names = i == 1)
}
rows = getRows(sheet)
cells = getCells(rows)
nrow = nrow(lm[[type]]$Frontal_Cortex) + 1
ncol = 6 * length(lm[[type]]) + 1
for(k in seq_along(cells)){
style = CellStyle(wb)
if(k <= length(lm[[type]])){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else {
i = as.integer((k - length(lm[[type]]) - 1) / ncol) + 1
#j = (k - length(lm[[type]])) %% ncol
j = (k - length(lm[[type]])) - (i - 1) * ncol
if(i == 1){
if(j == 1){
style = style_header + border(c("TOP", "BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style_header + border(c("TOP", "BOTTOM", "RIGHT"))
} else{
style = style_header + border(c("TOP", "BOTTOM"))
}
} else if (i != nrow) {
if(j == 1){
style = style_header + border(c("RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
#style = style_header + border("RIGHT")
} else {
next
}
} else {
if(j == 1){
style = style_header + border(c("BOTTOM", "RIGHT", "LEFT"))
} else if(j %% 6 == 1) {
style = style + border(c("BOTTOM", "RIGHT"))
} else {
style = style + border("BOTTOM")
}
}
}
setCellStyle(cells[[k]], style)
}
}
saveWorkbook(wb, '11_brian_regions_lm_results.xlsx')
source('~/Box Sync/UC Davis/Right Now/Researches/Zivkovic Lab/Alzheimer_Disease_Study/analysis/data/brain.R')
